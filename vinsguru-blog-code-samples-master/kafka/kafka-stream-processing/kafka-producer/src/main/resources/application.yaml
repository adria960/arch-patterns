spring.cloud.stream:
  function:
    definition: numberProducer
  bindings:
    numberProducer-out-0:
      destination: numbers
      producer:
        use-native-encoding: true
  kafka:
    bindings:
      numberProducer-out-0:
        producer:
          configuration:
            value:
              serializer: org.apache.kafka.common.serialization.LongSerializer
    binder:
      brokers:
        - localhost:9091
        - localhost:9092

#  spring.cloud.stream.kafka.binder.brokers=host1,host2
#  spring.cloud.stream.kafka.binder.defaultBrokerPort=port

#  spring.cloud.stream.function.definition    ->  where you provide the list of bean names (; separated).
#  spring.cloud.stream.bindings.numberProducer-out-0.destination -->  configures where the data has to go!
#  out indicates that Spring Boot has to write the data into the Kafka topic.
#  As you would have guessed, to read the data, simply use in.
#
#  Spring does it own serialization/deserialization.
#  I skip that and I go with Kafka native serialization and deserialization with these properties

#  spring.cloud.stream.bindings.numberProducer-out-0.producer.use-native-encoding
#  spring.cloud.stream.kafka.bindings.numberProducer-out-0.producer.configuration.value
#  Then I configure the kafka brokers address.